{"version":3,"sources":["components/SelectRow.js","App.js","reportWebVitals.js","index.js"],"names":["SelectRow","props","currencyOptions","selectedCurrency","onChangeCurrency","value","onChange","map","option","index","App","useState","data","setData","selectedFromCurrencyStream","setSelectedFromCurrencyStream","setCurrencyOptions","fromCurrency","setFromCurrency","toCurrency","setToCurrency","exchangeRate","setExchangeRate","amount","setAmount","toAmount","setToAmount","useEffect","getResults","fetch","then","res","json","firstCurrency","Object","keys","rates","currency","base","initialAmount","Math","round","className","onSubmit","event","preventDefault","calculatedAmount","type","target","min","selectedExchangeRate","filter","entries","forEach","handleCurrencyBase","handleToCurrency","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e71926e5.chunk.js","sourcesContent":["const SelectRow = (props) => {\r\n    const {currencyOptions, selectedCurrency, onChangeCurrency} = props\r\n\r\n    return(\r\n        <div>\r\n            <select value={selectedCurrency} onChange={onChangeCurrency}>{\r\n                currencyOptions.map((option, index) => (\r\n                    <option key={index} value={option}>{option}</option>\r\n                ))}\r\n            </select>\r\n        </div>\r\n    )\r\n}\r\nexport default SelectRow;","import React, {useState, useEffect} from \"react\"\r\nimport './App.css'\r\nimport SelectRow from \"./components/SelectRow\"\r\nfunction App() {\r\n    const [data, setData] = useState()\r\n    const [selectedFromCurrencyStream, setSelectedFromCurrencyStream] = useState()\r\n    const [currencyOptions, setCurrencyOptions] = useState([])\r\n    const [fromCurrency, setFromCurrency] = useState()\r\n    const [toCurrency, setToCurrency] = useState()\r\n    const [exchangeRate, setExchangeRate] = useState()\r\n    const [amount, setAmount] = useState(1)\r\n    const [toAmount, setToAmount] = useState()\r\n\r\n    useEffect(() => {\r\n        getResults()\r\n    }, [])\r\n\r\n    const getResults = () => {\r\n        fetch('./data/data.json')\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                const firstCurrency = Object.keys(data[0].rates)[1]\r\n                const currencyOptions = data.map(\r\n                    currency => (\r\n                        currency.base\r\n                    )\r\n                )\r\n                setCurrencyOptions(currencyOptions)\r\n                setData(data);\r\n                setSelectedFromCurrencyStream(data[0])\r\n                setFromCurrency(data[0].base)\r\n                setToCurrency(Object.keys(data[0].rates)[1])\r\n                setExchangeRate(data[0].rates[firstCurrency])\r\n                const initialAmount = Math.round(1 * data[0].rates[firstCurrency] * 100) / 100\r\n                setToAmount(initialAmount)\r\n            })}\r\n\r\n\r\n    const handleCurrencyBase = event =>{\r\n        let selectedFromCurrencyStream = data.filter(\r\n            currency => currency.base === event\r\n        )\r\n\r\n        setSelectedFromCurrencyStream(selectedFromCurrencyStream[0]);\r\n        let selectedExchangeRate\r\n        Object.entries(selectedFromCurrencyStream[0].rates).forEach(\r\n            currency => {\r\n                if(currency[0] === toCurrency){\r\n                    selectedExchangeRate = currency[1]\r\n                }\r\n            }\r\n        )\r\n\r\n        setExchangeRate(selectedExchangeRate);\r\n        //let calculatedAmount = amount * selectedExchangeRate;\r\n        //setToAmount(calculatedAmount);\r\n    }\r\n\r\n    const handleToCurrency = event =>{\r\n       let selectedExchangeRate;\r\n       Object.entries(selectedFromCurrencyStream.rates).forEach(\r\n            currency => {\r\n                if(currency[0] === event){\r\n                    selectedExchangeRate = currency[1]\r\n                }\r\n            }\r\n        )\r\n        setExchangeRate(selectedExchangeRate);\r\n        //let calculatedAmount = amount * selectedExchangeRate;\r\n        //setToAmount(calculatedAmount)\r\n    }\r\n\r\n    const handleSubmit = event =>{\r\n        event.preventDefault()\r\n        let calculatedAmount = Math.round(amount * exchangeRate * 100) / 100\r\n        setToAmount(calculatedAmount)\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <div className=\"container converter-wrapper\">\r\n                <form onSubmit={handleSubmit} className=\"row\">\r\n                    <div className=\"offset-md-2 col-sm-8 title-wrapper\"><h4>Currency converter</h4></div>\r\n                    <div className=\"offset-md-2 col-md-8 input-wrapper\">\r\n                        <div>Amount</div>\r\n                        <input type=\"number\" value={amount} onChange={event => setAmount(event.target.value)} min=\"1\"/>\r\n                    </div>\r\n                    <div className=\"offset-md-2 col-md-5 col-sm-12 select-wrapper\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-6 col-sm-12\">\r\n                                <div>from</div>\r\n                                <div>\r\n                                    <SelectRow\r\n                                        currencyOptions={currencyOptions}\r\n                                        selectedCurrency={fromCurrency}\r\n                                        onChangeCurrency={event => {setFromCurrency(event.target.value); handleCurrencyBase(event.target.value);}}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-md-6 col-sm-12\">\r\n                                <div>to</div>\r\n                                <div>\r\n                                    <SelectRow\r\n                                        currencyOptions={currencyOptions}\r\n                                        selectedCurrency={toCurrency}\r\n                                        onChangeCurrency={event => {setToCurrency(event.target.value); handleToCurrency(event.target.value);}}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col-md-3 button-wrapper\">\r\n                        <button type=\"submit\">Convert</button>\r\n                    </div>\r\n                    <div className=\"col-md-2\">\r\n                    </div>\r\n                    <div className=\"offset-md-2 col-md-8 calculated-amount\">Conversion amounts {toAmount}</div>\r\n                </form>\r\n            </div>\r\n        </div>\r\n);}\r\n\r\nexport default App;\r\n\r\n\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}